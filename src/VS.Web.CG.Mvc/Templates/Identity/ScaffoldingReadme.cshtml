@inherits Microsoft.VisualStudio.Web.CodeGeneration.Templating.RazorTemplateBase
@using System.Linq;
Support for ASP.NET Core Identity was added to your project
- The code for adding Identity to your project was generated under Areas/Identity.
@{ 
    if (!Model.UseDefaultUI && !Model.IsGeneratingIndividualFiles)
    {
@:- Content files have been added under wwwroot/Identity.
    }
@:
@:Configuration of the Identity related services can be found in the Areas/Identity/IdentityHostingStartup.cs file.
@:
    if (!Model.IsUsingExistingDbContext || Model.UseDefaultUI)
    {
@:If your app was previously configured to use Identity, then you should remove the call to the AddIdentity method from your ConfigureServices method.
    }
    else if (Model.IsUsingExistingDbContext)
    {
@:If your app was previously configured to use Identity with DefaultUI, then you should remove the call to the AddDefaultUI method from your ConfigureServices method.
    }

    foreach (var file in Model.FilesToGenerate)
    {
        if (file.Name == "_ViewStart")
        {
@:
@:The scaffolded identity area has its own layout. To use the application layout instead you need to remove the layout in the identity area and update _ViewStart.cshtml to point to the application layout.
            break;
        }
    }
}

The generated UI requires support for static files. To add static files to your app:
1. Call app.UseStaticFiles() from your Configure method

To use ASP.NET Core Identity you also need to enable authentication. To authentication to your app:
1. Call app.UseAuthentication() from your Configure method (after static files)

The generated UI requires MVC. To add MVC to your app:
1. Call services.AddMvc() from your ConfigureServices method
2. Call app.UseMvc() from your Configure method (after authentication)


Apps that use ASP.NET Core Identity should also use HTTPS. To enable HTTPS see https://go.microsoft.com/fwlink/?linkid=848054.

